// Pipeline script for the OSGP Nightly Build job in Jenkins
/* groovylint-disable CompileStatic, DuplicateStringLiteral, LineLength, NestedBlockDepth, NoDef, VariableTypeRequired */

def stream = 'osgp'
def servername = stream + '-at-' + env.BUILD_NUMBER
def playbook = stream + '-at.yml'
def branchReleaseRepo = 'feature/OC-712-run-automatic-tests-in-containerized-jenkins'
def amiName = 'CentOS7SingleInstance'
def amiOwner = 'self'
def ec2InstanceType = 'm4.xlarge'

def runTestScript(scriptName, projectName) {
    sh """./${scriptName} \
            ${servername}.dev.osgp.cloud \
            integration-tests \
            ${projectName} \
            centos \
            \"osgp_development.pem\" \
            \"\" \
            \"\""""
}

pipeline {
    agent {
      kubernetes {
        inheritFrom 'gxf-jenkins-agent'
      }
    }

    options {
        ansiColor('xterm')
        timestamps()
        timeout(240)
        // Only keep the 10 most recent builds
        buildDiscarder(logRotator(numToKeepStr:'10'))
    }

    environment {
        ANSIBLE_FORCE_COLOR = true
    }

    stages {
        stage('Parallel stages') {
            parallel {
                stage('SSH configuration') {
                    steps {
                        withCredentials([sshUserPrivateKey(credentialsId: 'jenkins-ssh-key', keyFileVariable: 'JENKINS_KEY_FILE' ),
                                sshUserPrivateKey(credentialsId: 'osgp-development-ssh-key', keyFileVariable: 'OSGP_DEVELOPMENT_KEY_FILE' )]) {
                            container('python') {
                                sh 'mkdir ~/.ssh'
                                sh 'cp ${JENKINS_KEY_FILE} ~/.ssh/id_rsa'
                                sh 'cp ${OSGP_DEVELOPMENT_KEY_FILE} ~/.ssh/\'osgp_development.pem\''
                                sh 'chmod 600 ~/.ssh/*'
                                sh 'echo \"Host github.com\n\tStrictHostKeyChecking no\n\" >> ~/.ssh/config'
                            } // container
                            container('maven') {
                                sh 'mkdir ~/.ssh'
                                sh 'cp ${JENKINS_KEY_FILE} ~/.ssh/id_rsa'
                                sh 'cp ${OSGP_DEVELOPMENT_KEY_FILE} ~/.ssh/\'osgp_development.pem\''
                                sh 'chmod 600 ~/.ssh/*'
                                sh 'echo \"Host github.com\n\tStrictHostKeyChecking no\n\" >> ~/.ssh/config'
                            } // container
                        } // withCredentials
                    } // steps
                } // stage

                stage('Ansible installation') {
                    steps {
                        container('python') {
                            // Install Ansible
                            sh 'apt-get update'
                            sh 'apt-get install -y python-lxml python-boto python-boto3'
                            sh 'set STATICBUILD=true && pip install lxml boto boto3 ansible==2.6.2'
                        } // container
                    } // steps
                } // stage

                stage('Maven build') {
                    steps {
                        echo 'Maven build'
                        container('maven') {
                            sh 'mvn clean install -B -DskipTestJarWithDependenciesAssembly=false'
                            sh 'mkdir -p target/artifacts && find . -name *.war -exec cp -uf {} target/artifacts \\;'
                        } // container
                    } // steps
                } // stage
            } // parallel
        } // stage

        stage('Test server creation') {
            steps {
                container('python') {
                    // Get Ansible playbooks from release repository
                    sh 'git clone git@github.com:SmartSocietyServices/release.git'
                    sh "cd release && git checkout ${branchReleaseRepo}"

                    script {
                        // Determine the actual pom version from the pom.
                        POMVERSION = sh ( script: 'grep \"<version>\" pom.xml | sed \"s#<[/]\\?version>##g;s# ##g\" | grep SNAPSHOT', returnStdout: true).trim()
                    } // script
                    echo "Using version ${POMVERSION} (from pom) to collect artifacts which are needed to deploy a new environment but weren't build in this job."

                    // Download missing artifacts from artifactory for the same version
                    // - The following artifacts are not in this repository
                    sh """cd release && ansible-playbook plays/download-artifacts.yml \
                            -e artifactstodownload='{{ configuration_artifacts }}' \
                            -e deployment_type=snapshot \
                            -e osgp_version=${POMVERSION} \
                            -e tmp_artifacts_directory=../../target/artifacts"""

                    sh """cd release && ansible-playbook plays/download-artifacts.yml \
                            -e artifactstodownload='{{ dlms_simulator_artifacts }}' \
                            -e deployment_type=snapshot \
                            -e osgp_version=${POMVERSION} \
                            -e tmp_artifacts_directory=../../target/artifacts"""

                    // Make sure configuration tgz is present
                    sh "cp -p target/artifacts/configuration-${POMVERSION}-configuration.tgz target/artifacts/configuration-${POMVERSION}.tgz"

                    // Create a new single instance (not stream specific) and put all the artifacts in /data/software/artifacts
                    sh """cd release && ansible-playbook plays/deploy-files-to-system.yml \
                            -e osgp_version=${POMVERSION} \
                            -e deployment_name=${servername} \
                            -e directory_to_deploy=../../target/artifacts \
                            -e tomcat_restart=false \
                            -e ec2_instance_type=${ec2InstanceType} \
                            -e ami_name=${amiName} \
                            -e ami_owner=${amiOwner}"""
                } // container
            } // steps
        } // stage

        stage('Test server software deployment') {
            steps {
                container('python') {
                    // Deploy artifacts
                    sh """cd release && ansible-playbook plays/${playbook} \
                            -e osgp_version=${POMVERSION} \
                            -e deployment_name=${servername} \
                            -e INSTALL_FROM_LOCAL_DIR=true \
                            -e ARTIFACT_DIRECTORY=/data/software/artifacts \
                            -e ARTIFACT_DIRECTORY_REMOTE_SRC=true \
                            -e ec2_instance_type=${ec2InstanceType} \
                            -e ami_name=${amiName} \
                            -e ami_owner=${amiOwner}"""

                    // Wait until probe is available, which is an indicator that everything is up and running.
                    sh "cd release  && ./wait.sh https://${servername}.dev.osgp.cloud/probe 900 302"
                } // container
            } // steps
        } // stage

        stage ('Test execution') {
            steps {
                container('maven') {
                    runTestScript('runTestsAtRemoteServer.sh', 'cucumber-tests-platform-common')
                    runTestScript('runPubliclightingTestsAtRemoteServer.sh','cucumber-tests-platform-publiclighting')
                    runTestScript('runMicrogridsTestsAtRemoteServer.sh','cucumber-tests-platform-microgrids')
                    runTestScript('runSmartMeteringTestsAtRemoteServer.sh','cucumber-tests-platform-smartmetering')
                    runTestScript('runDistributionAutomationTestsAtRemoteServer.sh','cucumber-tests-platform-distributionautomation')
//
//                    sh """./runTestsAtRemoteServer.sh \
//                            ${servername}.dev.osgp.cloud \
//                            integration-tests \
//                            cucumber-tests-platform-common \
//                            centos \
//                            \"osgp_development.pem\" \
//                            \"\" \
//                            \"\""""
//
//                    sh """./runPubliclightingTestsAtRemoteServer.sh \
//                            ${servername}.dev.osgp.cloud \
//                            integration-tests \
//                            cucumber-tests-platform-publiclighting \
//                            centos \
//                            \"osgp_development.pem\" \
//                            \"\" \
//                            \"\""""
//
//                     sh """./runMicrogridsTestsAtRemoteServer.sh \
//                            ${servername}-instance.dev.osgp.cloud \
//                            integration-tests \
//                            cucumber-tests-platform-microgrids \
//                            centos \
//                            \"osgp_development.pem\" \
//                            \"\" \
//                            \"\""""
//
//                     sh """./runSmartMeteringTestsAtRemoteServer.sh \
//                            ${servername}-instance.dev.osgp.cloud \
//                            integration-tests \
//                            cucumber-tests-platform-smartmetering \
//                            centos \
//                            \"osgp_development.pem\" \
//                            \"\" \
//                            \"\""""
//
//                     sh """./runDistributionAutomationTestsAtRemoteServer.sh \
//                            ${servername}-instance.dev.osgp.cloud \
//                            integration-tests \
//                            cucumber-tests-platform-distributionautomation \
//                            centos \
//                            \"osgp_development.pem\" \
//                            \"\" \
//                            \"\""""
                } // container
            } // steps
        } // stage

//        stage ('Collect Coverage') {
//            steps {
//                withMaven(
//                        maven: 'Apache Maven',
//                        mavenLocalRepo: '.repository',
//                        options: [
//                                artifactsPublisher(disabled: true),
//                                openTasksPublisher(disabled: true)
//                        ]) {
//                    sh "mvn -Djacoco.destFile=target/code-coverage/jacoco-it.exec -Djacoco.address=${servername}.dev.osgp.cloud org.jacoco:jacoco-maven-plugin:0.7.9:dump"
//                } // withMaven
//            } // steps
//        } // stage

        stage ('Reporting') {
            steps {
//                jacoco execPattern: '**/code-coverage/jacoco-it.exec'
                cucumber buildStatus: 'FAILURE', fileIncludePattern: '**/cucumber.json', sortingMethod: 'ALPHABETICAL'
                archiveArtifacts '**/target/*.tgz'

                // Check the console log for failed tests
                step([$class: 'LogParserPublisher', projectRulePath: 'console-test-result-rules', unstableOnWarning: true, failBuildOnError: true, useProjectRule: true])
            } // steps
        } // stage
    } // stages

    post {
        always {
            echo 'End of pipeline'
            echo 'Destroying test server'
            container('python') {
                sh """cd release && ansible-playbook plays/${playbook} \
                        -e deployment_name=${servername} \
                        -e deployment_action=destroy \
                        -e ec2_instance_type=${ec2InstanceType}"""
            }
        }
        // failure {
        //     emailext (
        //         subject: '${DEFAULT_SUBJECT}',
        //         body: '${DEFAULT_CONTENT}',
        //         recipientProviders: [[$class: 'DevelopersRecipientProvider'], [$class: 'RequesterRecipientProvider']],
        //         to: '${DEFAULT_RECIPIENTS}',
        //         from: '${DEFAULT_REPLYTO}')
        // }
        cleanup {
            // Delete workspace folder.
            cleanWs()
        }
    } // post

}
